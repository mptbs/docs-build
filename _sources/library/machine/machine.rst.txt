:mod:`machine` --- Functions to control mcu peripherals
========================================================

.. module:: machine
..      :sypnosis: Functions to control mcu peripherals

The ``machine`` module contains specific functions and classes
related to the microcontroller on the board. Most functions
in this module allow direct and unrestricted access to and
control of hardware peripherals on the microcontroller (such as
CPU, timers, buses, etc.). If used incorrectly, this can lead to
malfunction, lockups, crashes of your board, and in extreme cases,
hardware damage.

.. _machine_callbacks:

A small note on the callbacks used by functions and class methods of
the ``machine`` module: all these callbacks should be considered
as executing in an interrupt context. This is true both for physical
devices with IDs >= 0 as well as "virtual" devices with negative IDs
like -1. See :ref:`isr_rules`.

Reset related functions
-----------------------

.. function:: reset()

    Resets the device in a manner similar to pushing the external 
    RESET button.

.. function:: reset_cause()

    Return the reset cause. See :ref:`constants <machine_constants>` 
    for possible return values.

Interrupt related functions
---------------------------

.. function:: disable_irq()

    Disable interrupt requests.
    Returns the previous IRQ state, which should be considered an
    opaque value. This return value should be passed to the
    ``enable_irq`` function in order to restore interrupts to the
    original state, from before ``disable_irq`` was called.

.. function:: enable_irq( state )

    Re-enable interrupt requests.
    The ``state`` parameter should be the value that was returned from
    the most recent call to the ``disable_irq`` function.

Power related functions
-----------------------

.. function:: freq()

    Returns the CPU frequency in hertz.

.. function:: idle()

    Turns of the clock to the CPU, which is useful to reduce power consumption
    during long or short periods. Peripherals continue working, and execution
    resumes as soon as any interrupt is triggered. This includes the system
    timer interrupt, which is triggered every millisecond. This mode
    equals entering EM1-mode.

.. function:: sleep()

    Stops the CPU and disables most peripherals. Execution resumes from the
    point where sleep was requested. For wake up to happen, wake sources
    should be configured first. This mode equals entering EM3-mode.

.. function:: deepsleep()

    Stops the CPU and all peripherals. Waking up works similar to a reset.
    The reset cause can be checked with the ``reset_cause`` function to verify
    that we are coming from ``machine.DEEPSLEEP``. For wakeup to actually happen,
    wake sources should be configured first, like ``Pin`` change or ``RTC`` timeout.

Miscellaneous functions
-----------------------

.. function:: unique_id()

    Returns a byte string with a unique identifier of a board/SoC, and will be
    different from one board/SoC to another. Length varies by hardware.

.. function:: time_pulse_us(pin, pulse_level, timeout_us=1000000)

    Time a pulse on the given `pin`, and return the duration of the pulse
    in microseconds. The `pulse_level` argument should be 0 to time a low pulse,
    or 1 to time a high pulse. 

    If the current input value of the pin is different to `pulse_level`, the function
    first (*) waits until the pin input becomes equal to `pulse_level`, then (**) times
    the duration that the pin is equal to `pulse_level`. If the pin is already equal to 
    `pulse_level`the timing starts right away.

    The function will return -2 if there was a timeout waiting for the condition marked (*)
    above, and -1 if there was a timeout during the main measurement, marked (**) above.
    The timeout is the same for both cases and given by `timeout_us (which is in microseconds). 
    Otherwise the return value is the timed pulse in microseconds.

.. _machine_constants:

Constants
---------

.. data:: machine.PWR_ON_RESET
.. data:: machine.HARD_RESET
.. data:: machine.SOFT_RESET
.. data:: machine.WDT_RESET
.. data:: machine.DEEPSLEEP_RESET

    

Classes
-------

.. toctree::
    :maxdepth: 1

    machine.I2C.rst
    machine.Pin.rst
    machine.SPI.rst
    machine.Timer.rst
    machine.IRQ.rst
